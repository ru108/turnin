#!/usr/bin/python2

##########################################################################
# The MIT License (MIT)                                                  #
#                                                                        #
# Copyright (c) 2014 Antonios A. Chariton <daknob@tolabaki.gr>           #
#                                                                        #
# Permission is hereby granted, free of charge, to any person obtaining  #
# a copy of this software and associated documentation files (the        #
# "Software"), to deal in the Software without restriction, including    #
# without limitation the rights to use, copy, modify, merge, publish,    #
# distribute, sublicense, and/or sell copies of the Software, and to     #
# permit persons to whom the Software is furnished to do so, subject to  #
# the following conditions:                                              #
#                                                                        #
# The above copyright notice and this permission notice shall be         #
# included in all copies or substantial portions of the Software.        #
#                                                                        #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  #
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE #
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION #
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  #
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        #
##########################################################################

##########################################################################
#                                                                        #
# Verifies if the current user has successfully turned in an             #
# assignment for assignment in class.                                    #
#                                                                        #
##########################################################################

import sys,os
import datetime

ver = "1.0"

def usage():
    print (" verify-turnin v" + ver)
    print " Usage: "
    print " verify-turnin assignment@course "
    print " \tVerify the turnin has been successful "
    print " verify-turnin -V "
    print " \tShow Copyright and Version information "

def versionstuff():
    print (" verify-turnin v" + ver)
    print " Copyright: "
    print " Copyright (c) 2014 \tAntonios A. Chariton \t<daknob@tolabaki.gr> "
    print " License: "
    print " The current file is under the MIT License. "
    print " You can obtain a copy of the license here: <http://opensource.org/licenses/MIT> "
    print " Development: "
    print " Source Code available on GitHub: <https://github.com/zakkak/turnin> "

def isDir(path):
    return (os.path.exists(path) and os.path.isdir(path))

if(len(sys.argv) != 2):     # On improper calls, return usage information
    usage()
    exit(1)                 # Improper Call

if(sys.argv[1] == "-V" or sys.argv[1] == "-v"): # Handle version and copyright
    versionstuff()
    exit(0)

if(not("@" in sys.argv[1])):    # Check if the argument supplied is indeed "properly" formatted
    usage()
    exit(1)

argz = sys.argv[1].split("@")   # Split the argument supplied by using @ as a delimiter
assignment = argz[0]            # The first field is the assignment
course = argz[1]                # The second field is the course
                                # For the others we don't *really* care that much :P

classDir = os.path.expanduser("~" + course)

if (not(isDir(classDir))):      # Check if the user has a home directory
    print " Could not find specified course "
    exit(2)                 # Could not find course
if (not(isDir(classDir + "/TURNIN/" + assignment))):    # Check if the assignment exists
    print " Could not find assignment directory "
    exit(3)                 # Could not find assignment

grep = os.system("ls -l '" + classDir + "/TURNIN/" + assignment + "' | grep `whoami` | grep -v '#' | grep -v '>' > /dev/null 2> /dev/null")
if( grep != 0 ):
    grep = os.system("ls -l '" + classDir + "/TURNIN/" + assignment + "' | grep `whoami` | grep -v '>' > /dev/null 2> /dev/null")
    if ( grep == 0 ):
        print (" You have attempted to turn in " + assignment + " for " + course + " but it is not valid.")
    else:
        print (" You have not turned in " + assignment + " for " + course + "! ")
    exit(0)

print (" You have successfully turned in " + assignment + " for " + course + " ")

daypenalty = 10
weekendpenalty = 5
penalty = 0

if os.path.isfile(classDir + "/TURNIN/" + assignment + "/DUE"):
    file_settings = open(classDir + "/TURNIN/" + assignment + "/LIMITS", 'r')
    for line in file_settings:
        words = line.split()
        word = int(words[1])
        daypenalty = word if words[0] == "daypenalty" and (word > 0 and word < 100) else daypenalty
        weekendpenalty = word if words[0] == "weekendpenalty" and (word > 0 and word < 100) else weekendpenalty

    fileDue = os.path.getmtime(classDir + "/TURNIN/" + assignment + "/DUE")
    now = datetime.datetime.today()
    filedate = datetime.datetime.fromtimestamp(fileDue)
    difftime = now - filedate
    diff_days = difftime.days
    if diff_days > 0:
        if diff_days > 1:
            if (now.hour < filedate.hour) or (now.hour == filedate.hour and now.minute < filedate.minute):
                now -= datetime.timedelta(days=1)
        while diff_days > 0:
            now -= datetime.timedelta(days=1)
            penalty += weekendpenalty if (now.weekday() == 5 or now.weekday() == 6) else daypenalty
            diff_days -= 1
            if penalty >= 100:
                print " MAX %d PENALTY REACHED " % penalty
                break
    print " You have %d%% penalty on final grade for %d days " % (penalty, difftime.days)
